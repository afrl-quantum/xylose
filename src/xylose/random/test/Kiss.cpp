#include <xylose/random/Kiss.hpp>

#include <fstream>
#include <vector>
#include <iostream>


int main () {
  std::cout << 
    "This program is for generating binary output files from the Kiss random\n"
    "number generator.  There are two files generated which can be used as\n"
    "input to a random number testing package (such as DIEHARD by George\n"
    "Marsaglia).  The two files generated are:\n"
    "       test_kiss.dat\n"
    "           A sequence of random numbers generated by a single Kiss\n"
    "           instance that has been seeded with the default seed values\n"
    "           (Default seeds are 1,2,3,4).\n"
    "       test_kiss-intlv.dat\n"
    "           A sequence of random numbers generated by a set of Kiss\n"
    "           instances.  For each iteration, all the generators are\n"
    "           sequentially queried such that each number in the file\n"
    "           is from the same RNG generation as the numbers around it.\n"
            << std::endl;


  using xylose::random::Kiss;

  const int total_rolls = 6000000;

  {
    Kiss r;
    std::ofstream out("test_kiss.dat");
    for ( int i = 0; i < total_rolls; ++i) {
      uint32_t val = r.randInt();
      out.write((char*)&val, sizeof(uint32_t));
    }
    out.close();
  }

  {
    const int n_generators = 100000;
    const int max_iter = total_rolls / n_generators;

    Kiss sr;
    std::vector<Kiss> rv;
    for (int i = 0; i < n_generators; ++i) {
      rv.push_back(
        Kiss( sr.randInt(),
                  sr.randInt(),
                  sr.randInt(),
                  sr.randInt()
        )
      );
    }

    std::ofstream out("test_kiss-intlv.dat");
    for ( int i = 0; i < max_iter; ++i) {
      for (int n = 0; n < n_generators; ++n) {
        uint32_t val = rv[n].randInt();
        out.write((char*)&val, sizeof(uint32_t));
      }
    }
    out.close();
  }

  return 0;
}

