/*@HEADER
 *         olson-tools:  A variety of routines and algorithms that
 *      I've developed and collected over the past few years.  This collection
 *      represents tools that are most useful for scientific and numerical
 *      software.  This software is released under the LGPL license except
 *      otherwise explicitly stated in individual files included in this
 *      package.  Generally, the files in this package are copyrighted by
 *      Spencer Olson--exceptions will be noted.   
 *                 Copyright 2006-2009 Spencer E. Olson
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of the
 * License, or (at your option) any later version.
 *  
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *                                                                                 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA.                                                                           .
 * 
 * Questions? Contact Spencer Olson (olsonse@umich.edu) 
 */

/** \file
 * A simple interface to evaluate Functor type tasks in the xylose::PThreadCache
 * facility.
 *
 * Copyright 2006-2009 Spencer Olson
 *
 */

/** \example threadcache/easier/testPThreadEval.cpp
 * Two examples of the simpler task evaluator interface to the xylose::PThreadCache
 * facility.
 *
 * The first example shows work being done in each thread that produces results
 * that must be gathered together (a scatter-gather scheme).
 *
 * The second example demonstrates independent work being done in each thread
 * that does not produced gatherable results (a scatter-only scheme).
 */

#ifndef xylose_PthreadEval_h
#define xylose_PthreadEval_h

#include <xylose/PThreadCache.h>

namespace xylose {

  /** The basic thread functor that all others should inherit from and then
   * override.  Inheriting classes should override as many functions from this
   * class as needed.
   */
  struct DefaultPThreadFunctor {
    /** Gathering function called during a call to
     * PThreadEval::joinAll(Gatherer&).  Inheriting classes that must gather
     * results <b><em>must</em></b> override this function.
     *
     * @tparam Gatherer
     *    The type of storage used for gathering operations.
     *
     * @param gatherer
     *    The storage instance.
     */
    template < typename Gatherer >
    void accept( Gatherer & gatherer ) const { }
  };

  /** High level scatter-gather control of tasks executed by a cache of threads.
   * @tparam Functor
   *    The functor type to evaluate on each thread.
   */
  template < typename Functor >
  class PThreadEval {
    /* TYPEDEFS */
  private:
    typedef xylose::PThreadTaskSet PThreadTaskSet;
    typedef xylose::PThreadTask PThreadTask;

    /** Task for the PThread cache manager. */
    struct PThreadEvalTask : PThreadTask {
      /* MEMBER STORAGE */
      /** reference to the relevant child. */
      Functor f;


      /* MEMBER FUNCTIONS */
      /** Virtual NO-OP Destructor. */
      virtual ~PThreadEvalTask() {}

      /** Task constructor. */
      PThreadEvalTask( const Functor & f ) :
        PThreadTask(), f(f) { }

      /** Actually build the sub-tree. */
      virtual void exec() {
        f();
      }
    };

    /** Functor to sum up total leaves generated by a list of finished tasks. */
    template < typename Gatherer >
    struct deleteTasks : public std::unary_function<PThreadTask *, void> {
      /* MEMBER STORAGE */
      Gatherer & g;

      /* MEMBER FUNCTIONS */
      /** Constructor specifies a reference to the gatherer. */
      deleteTasks( Gatherer & g ) : g(g) { }

      /** Functor operation. */
      void operator() (PThreadTask * t) {
        /* Execute the user's gather code. */
        static_cast<PThreadEvalTask*>(t)->f.accept(g);

        /* we finally delete the actual memory of the task. */
        delete t;
      }
    };

    /** No-Op task gatherer. */
    struct NoOpGather {
      template < typename T >
      void update( const T & t ) { }
    };




    /* MEMBER STORAGE */
  private:
    /** The cache manager to use. */
    PThreadCache & cache;

    /** The tasks to evaluate. */
    PThreadTaskSet tasks;



    /* MEMBER FUNCTIONS */
  public:
    /** Constructor.
     * @param cache
     *    Specify the cache instance to use [default xylose::pthreadCache].
     */
    PThreadEval( PThreadCache & cache = xylose::pthreadCache )
      : cache(cache) { }

    /** Task scatterer.  */
    inline void eval( const Functor & f, bool self_if_none_avail = false ) {
      /* first wait for a thread to become available */
      PThreadTask * task = new PThreadEvalTask( f );
      tasks.insert(task);
      cache.addTask( task, self_if_none_avail );
    }

    /** Task gatherer.  This function makes sure that all of this
     * instance's tasks are completed before returning.
     */
    inline void joinAll() {
      NoOpGather gather;
      joinAll( gather );
    }

    /** Task gatherer.  This function makes sure that all of this
     * instance's tasks are completed before returning.
     */
    template < typename Gatherer >
    inline void joinAll( Gatherer & g ) {
      while (tasks.size() > 0) {
        PThreadTaskSet finished = cache.waitForTasks(tasks);

        /* Allow the user to do something with the task results. */
        for_each( finished.begin(), finished.end(), deleteTasks<Gatherer>(g) );

        /* Now make sure that we remove the finished tasks from the
         * tasks set.  We'll use the set operations to do this. */
        PThreadTaskSet tmp;
        std::set_difference( tasks.begin(), tasks.end(),
                             finished.begin(), finished.end(),
                             inserter(tmp, tmp.begin()) );
        tasks.swap(tmp);
      }
    }
  };

} /* namespace xylose */

#endif // xylose_PthreadEval_h
